/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Parameters from "./models/parameters";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { MicrosoftAzureCosmosDbRestApiContext } from "./microsoftAzureCosmosDbRestApiContext";
import {
  MicrosoftAzureCosmosDbRestApiOptionalParams,
  Enum1,
  PartitionKeyItemsItem,
  MicrosoftAzureCosmosDBRestAPICreateDocumentResponse,
  MicrosoftAzureCosmosDBRestAPIReadDocumentFeedResponse,
  MicrosoftAzureCosmosDBRestAPIReadDocumentResponse,
  DocumentWithId,
  MicrosoftAzureCosmosDBRestAPIReplaceDocumentResponse,
  MicrosoftAzureCosmosDBRestAPIDeleteDocumentResponse,
  MicrosoftAzureCosmosDBRestAPICreateDatabaseOptionalParams,
  MicrosoftAzureCosmosDBRestAPICreateDatabaseResponse,
  MicrosoftAzureCosmosDBRestAPIReadDatabaseFeedResponse,
  MicrosoftAzureCosmosDBRestAPIReadDatabaseResponse,
  MicrosoftAzureCosmosDBRestAPICreateCollectionOptionalParams,
  MicrosoftAzureCosmosDBRestAPICreateCollectionResponse,
  MicrosoftAzureCosmosDBRestAPIReadCollectionFeedResponse,
  MicrosoftAzureCosmosDBRestAPIReadCollectionResponse
} from "./models";

class MicrosoftAzureCosmosDbRestApi extends MicrosoftAzureCosmosDbRestApiContext {
  /**
   * Initializes a new instance of the MicrosoftAzureCosmosDbRestApi class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param databaseName The database name.
   * @param collectionName The collection name.
   * @param xMsVersion The API version.
   * @param xMsDate The date the request was sent.
   * @param xMsDocumentdbPartitionkey The logical partition key value
   * @param documentId The document id.
   * @param xMsOfferThroughput The user specified throughput for the collection expressed in units of
   *                           request units per second.
   * @param options The parameter options
   */
  constructor(
    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,
    databaseName: string,
    collectionName: string,
    xMsVersion: Enum1,
    xMsDate: Date,
    xMsDocumentdbPartitionkey: PartitionKeyItemsItem[],
    documentId: string,
    xMsOfferThroughput: number,
    options?: MicrosoftAzureCosmosDbRestApiOptionalParams
  ) {
    super(
      credentials,
      databaseName,
      collectionName,
      xMsVersion,
      xMsDate,
      xMsDocumentdbPartitionkey,
      documentId,
      xMsOfferThroughput,
      options
    );
  }

  /**
   * Creates a new document in a collection.
   * @param body JSON document that needs to be added to the collection.
   * @param options The options parameters.
   */
  createDocument(
    body: any,
    options?: coreHttp.OperationOptions
  ): Promise<MicrosoftAzureCosmosDBRestAPICreateDocumentResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { body, options: operationOptions },
      createDocumentOperationSpec
    ) as Promise<MicrosoftAzureCosmosDBRestAPICreateDocumentResponse>;
  }

  /**
   * Returns a list of documents under the collection.
   * @param options The options parameters.
   */
  readDocumentFeed(
    options?: coreHttp.OperationOptions
  ): Promise<MicrosoftAzureCosmosDBRestAPIReadDocumentFeedResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      readDocumentFeedOperationSpec
    ) as Promise<MicrosoftAzureCosmosDBRestAPIReadDocumentFeedResponse>;
  }

  /**
   * Retrieves a document by its partition key and document key.
   * @param options The options parameters.
   */
  readDocument(
    options?: coreHttp.OperationOptions
  ): Promise<MicrosoftAzureCosmosDBRestAPIReadDocumentResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      readDocumentOperationSpec
    ) as Promise<MicrosoftAzureCosmosDBRestAPIReadDocumentResponse>;
  }

  /**
   * Replaces the entire content of a document.
   * @param body JSON document that needs to be added to the collection.
   * @param options The options parameters.
   */
  replaceDocument(
    body: DocumentWithId,
    options?: coreHttp.OperationOptions
  ): Promise<MicrosoftAzureCosmosDBRestAPIReplaceDocumentResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { body, options: operationOptions },
      replaceDocumentOperationSpec
    ) as Promise<MicrosoftAzureCosmosDBRestAPIReplaceDocumentResponse>;
  }

  /**
   * Deletes an existing document in a collection.
   * @param options The options parameters.
   */
  deleteDocument(
    options?: coreHttp.OperationOptions
  ): Promise<MicrosoftAzureCosmosDBRestAPIDeleteDocumentResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      deleteDocumentOperationSpec
    ) as Promise<MicrosoftAzureCosmosDBRestAPIDeleteDocumentResponse>;
  }

  /**
   * Creates a new database in the database account.
   * @param options The options parameters.
   */
  createDatabase(
    options?: MicrosoftAzureCosmosDBRestAPICreateDatabaseOptionalParams
  ): Promise<MicrosoftAzureCosmosDBRestAPICreateDatabaseResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      createDatabaseOperationSpec
    ) as Promise<MicrosoftAzureCosmosDBRestAPICreateDatabaseResponse>;
  }

  /**
   * Gets a list of databases in the database account.
   * @param options The options parameters.
   */
  readDatabaseFeed(
    options?: coreHttp.OperationOptions
  ): Promise<MicrosoftAzureCosmosDBRestAPIReadDatabaseFeedResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      readDatabaseFeedOperationSpec
    ) as Promise<MicrosoftAzureCosmosDBRestAPIReadDatabaseFeedResponse>;
  }

  /**
   * Gets a database from the database account.
   * @param options The options parameters.
   */
  readDatabase(
    options?: coreHttp.OperationOptions
  ): Promise<MicrosoftAzureCosmosDBRestAPIReadDatabaseResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      readDatabaseOperationSpec
    ) as Promise<MicrosoftAzureCosmosDBRestAPIReadDatabaseResponse>;
  }

  /**
   * Deletes an existing database in the database account.
   * @param options The options parameters.
   */
  deleteDatabase(
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      deleteDatabaseOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Creates a new collection in a database.
   * @param options The options parameters.
   */
  createCollection(
    options?: MicrosoftAzureCosmosDBRestAPICreateCollectionOptionalParams
  ): Promise<MicrosoftAzureCosmosDBRestAPICreateCollectionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      createCollectionOperationSpec
    ) as Promise<MicrosoftAzureCosmosDBRestAPICreateCollectionResponse>;
  }

  /**
   * Gets a page of results from the collection feed.
   * @param options The options parameters.
   */
  readCollectionFeed(
    options?: coreHttp.OperationOptions
  ): Promise<MicrosoftAzureCosmosDBRestAPIReadCollectionFeedResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      readCollectionFeedOperationSpec
    ) as Promise<MicrosoftAzureCosmosDBRestAPIReadCollectionFeedResponse>;
  }

  /**
   * Gets a collection from the database
   * @param options The options parameters.
   */
  readCollection(
    options?: coreHttp.OperationOptions
  ): Promise<MicrosoftAzureCosmosDBRestAPIReadCollectionResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      readCollectionOperationSpec
    ) as Promise<MicrosoftAzureCosmosDBRestAPIReadCollectionResponse>;
  }

  /**
   * Deletes a collection from the database
   * @param options The options parameters.
   */
  deleteCollection(
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      deleteCollectionOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const createDocumentOperationSpec: coreHttp.OperationSpec = {
  path: "/dbs/{databaseName}/colls/{collectionName}/docs",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.DocumentResponse,
      headersMapper: Mappers.MicrosoftAzureCosmosDBRestAPICreateDocumentHeaders
    },
    400: {},
    403: {},
    409: {},
    413: {}
  },
  requestBody: Parameters.body,
  urlParameters: [
    Parameters.$host,
    Parameters.databaseName,
    Parameters.collectionName
  ],
  headerParameters: [
    Parameters.contentType,
    Parameters.xMsVersion,
    Parameters.xMsDate
  ],
  serializer
};
const readDocumentFeedOperationSpec: coreHttp.OperationSpec = {
  path: "/dbs/{databaseName}/colls/{collectionName}/docs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DocumentFeedResponse,
      headersMapper:
        Mappers.MicrosoftAzureCosmosDBRestAPIReadDocumentFeedHeaders
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.databaseName,
    Parameters.collectionName
  ],
  headerParameters: [
    Parameters.xMsVersion,
    Parameters.xMsDate,
    Parameters.xMsDocumentdbPartitionkey,
    Parameters.xMsMaxItemCount,
    Parameters.xMsContinuation
  ],
  serializer
};
const readDocumentOperationSpec: coreHttp.OperationSpec = {
  path: "/dbs/{databaseName}/colls/{collectionName}/docs/{documentId}",
  httpMethod: "GET",
  responses: {
    200: {
      headersMapper: Mappers.MicrosoftAzureCosmosDBRestAPIReadDocumentHeaders
    },
    404: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.databaseName,
    Parameters.collectionName,
    Parameters.documentId
  ],
  headerParameters: [
    Parameters.xMsVersion,
    Parameters.xMsDate,
    Parameters.xMsDocumentdbPartitionkey
  ],
  serializer
};
const replaceDocumentOperationSpec: coreHttp.OperationSpec = {
  path: "/dbs/{databaseName}/colls/{collectionName}/docs/{documentId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DocumentResponse,
      headersMapper: Mappers.MicrosoftAzureCosmosDBRestAPIReplaceDocumentHeaders
    },
    400: {},
    404: {},
    409: {},
    413: {}
  },
  requestBody: Parameters.body1,
  urlParameters: [
    Parameters.$host,
    Parameters.databaseName,
    Parameters.collectionName,
    Parameters.documentId
  ],
  headerParameters: [
    Parameters.contentType,
    Parameters.xMsVersion,
    Parameters.xMsDate,
    Parameters.xMsDocumentdbPartitionkey
  ],
  serializer
};
const deleteDocumentOperationSpec: coreHttp.OperationSpec = {
  path: "/dbs/{databaseName}/colls/{collectionName}/docs/{documentId}",
  httpMethod: "DELETE",
  responses: {
    204: {
      headersMapper: Mappers.MicrosoftAzureCosmosDBRestAPIDeleteDocumentHeaders
    },
    404: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.databaseName,
    Parameters.collectionName,
    Parameters.documentId
  ],
  headerParameters: [
    Parameters.xMsVersion,
    Parameters.xMsDate,
    Parameters.xMsDocumentdbPartitionkey
  ],
  serializer
};
const createDatabaseOperationSpec: coreHttp.OperationSpec = {
  path: "/dbs",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.DatabaseResponse
    }
  },
  requestBody: Parameters.body2,
  urlParameters: [Parameters.$host],
  headerParameters: [
    Parameters.contentType,
    Parameters.xMsVersion,
    Parameters.xMsDate
  ],
  serializer
};
const readDatabaseFeedOperationSpec: coreHttp.OperationSpec = {
  path: "/dbs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DatabaseFeedResponse,
      headersMapper:
        Mappers.MicrosoftAzureCosmosDBRestAPIReadDatabaseFeedHeaders
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [
    Parameters.xMsVersion,
    Parameters.xMsDate,
    Parameters.xMsMaxItemCount,
    Parameters.xMsContinuation
  ],
  serializer
};
const readDatabaseOperationSpec: coreHttp.OperationSpec = {
  path: "/dbs/{databaseName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DatabaseResponse
    },
    404: {}
  },
  urlParameters: [Parameters.$host, Parameters.databaseName],
  headerParameters: [Parameters.xMsVersion, Parameters.xMsDate],
  serializer
};
const deleteDatabaseOperationSpec: coreHttp.OperationSpec = {
  path: "/dbs/{databaseName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 404: {} },
  urlParameters: [Parameters.$host, Parameters.databaseName],
  headerParameters: [Parameters.xMsVersion, Parameters.xMsDate],
  serializer
};
const createCollectionOperationSpec: coreHttp.OperationSpec = {
  path: "/dbs/{databaseName}/colls",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.CollectionResponse
    },
    400: {},
    409: {}
  },
  requestBody: Parameters.body3,
  urlParameters: [Parameters.$host, Parameters.databaseName],
  headerParameters: [
    Parameters.contentType,
    Parameters.xMsVersion,
    Parameters.xMsDate,
    Parameters.xMsOfferThroughput
  ],
  serializer
};
const readCollectionFeedOperationSpec: coreHttp.OperationSpec = {
  path: "/dbs/{databaseName}/colls",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CollectionFeedResponse,
      headersMapper:
        Mappers.MicrosoftAzureCosmosDBRestAPIReadCollectionFeedHeaders
    }
  },
  urlParameters: [Parameters.$host, Parameters.databaseName],
  headerParameters: [
    Parameters.xMsVersion,
    Parameters.xMsDate,
    Parameters.xMsMaxItemCount,
    Parameters.xMsContinuation
  ],
  serializer
};
const readCollectionOperationSpec: coreHttp.OperationSpec = {
  path: "/dbs/{databaseName}/colls/{collectionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CollectionResponse
    },
    404: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.databaseName,
    Parameters.collectionName
  ],
  headerParameters: [Parameters.xMsVersion, Parameters.xMsDate],
  serializer
};
const deleteCollectionOperationSpec: coreHttp.OperationSpec = {
  path: "/dbs/{databaseName}/colls/{collectionName}",
  httpMethod: "DELETE",
  responses: { 204: {}, 404: {} },
  urlParameters: [
    Parameters.$host,
    Parameters.databaseName,
    Parameters.collectionName
  ],
  headerParameters: [Parameters.xMsVersion, Parameters.xMsDate],
  serializer
};

// Operation Specifications

export {
  MicrosoftAzureCosmosDbRestApi,
  MicrosoftAzureCosmosDbRestApiContext,
  Models as MicrosoftAzureCosmosDbRestApiModels,
  Mappers as MicrosoftAzureCosmosDbRestApiMappers
};
