/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export interface DocumentResponse {
  /**
   * This is the unique name that identifies the document, i.e. no two documents can share the same id.
   */
  id: string;
  /**
   * This is a system generated property. The resource ID (_rid) is a unique identifier that is also hierarchical per the resource stack on the resource model. It is used internally for placement and navigation of the document resource.
   */
  rid: Uint8Array;
  /**
   * This is a system generated property. It specifies the last updated timestamp of the resource. The value is a timestamp.
   */
  ts: number;
  /**
   * This is a system generated property. It is the unique addressable URI for the resource.
   */
  self: string;
  /**
   * This is a system generated property that specifies the resource etag required for optimistic concurrency control.
   */
  etag: string;
  /**
   * This is a system generated property that specifies the addressable path for the attachments resource.
   */
  attachments: string;
}

export interface PartitionKeyItemsItem {}

export interface DocumentFeedResponse {
  /**
   * This is the system generated resource ID for the collection where the documents reside.
   */
  rid: string;
  /**
   * The array of documents returned by the operation.
   */
  documents: DocumentResponse[];
  /**
   * This is the number of documents returned by the list operation.
   */
  count: number;
}

export interface DocumentWithId {
  /**
   * Describes unknown properties. The value of an unknown property can be of "any" type.
   */
  [property: string]: any;
  id?: string;
}

export interface DatabaseRequest {
  /**
   * The user-generated unique name for the database.
   */
  id?: string;
}

export interface DatabaseResponse {
  /**
   * The user-generated unique name for the database.
   */
  id: string;
  /**
   * A system generated property. The resource ID (_rid) is a unique identifier that is also hierarchical per the resource stack on the resource model. It is used internally for placement of and navigation to the database resource.
   */
  rid: Uint8Array;
  /**
   * A system generated property. It specifies the last updated timestamp of the resource. The value is a timestamp.
   */
  ts: number;
  /**
   * A system generated property. It is the unique addressable URI for the resource.
   */
  self: string;
  /**
   * A system generated property that specifies the resource etag required for optimistic concurrency control.
   */
  etag: string;
  /**
   * A system-generated property that specifies the addressable path of the collections resource.
   */
  colls: string;
  /**
   * A system-generated property that specifies the addressable path of the users resource.
   */
  users: string;
}

export interface DatabaseFeedResponse {
  /**
   * The _rid value is empty for this operation.
   */
  rid: string;
  /**
   * The databases returned as part of the list operation.
   */
  databases?: DatabaseResponse[];
  /**
   * This is the number of documents returned by the list operation.
   */
  count: number;
}

export interface CollectionRequest {
  /**
   * The user generated unique name for the collection.
   */
  id: string;
  /**
   * This value is used to configure indexing policy. By default, the indexing is automatic for all document paths within the collection.
   */
  indexingPolicy?: IndexingPolicy;
  /**
   * This value is used to configure the partition key to be used for partitioning data into multiple partitions.
   */
  partitionKey?: PartitionKey;
}

/**
 * This value is used to configure indexing policy. By default, the indexing is automatic for all document paths within the collection.
 */
export interface IndexingPolicy {
  /**
   * Consistent: The index is updated synchronously as you create, update or delete items. This means that the consistency of your read queries will be the consistency configured for the account. None: Indexing is disabled on the container. This is commonly used when a container is used as a pure key-value store without the need for secondary indexes. It can also be used to improve the performance of bulk operations. After the bulk operations are complete, the index mode can be set to Consistent and then monitored using the IndexTransformationProgress until complete.
   *
   */
  indexingMode?: IndexingPolicyIndexingMode;
  includedPaths?: IndexingPolicyIncludedPathsItem[];
  excludedPaths?: IndexingPolicyExcludedPathsItem[];
  compositeIndexes?: IndexingPolicyCompositeIndexesItem[];
  spatialIndexes?: IndexingPolicySpatialIndexesItem[];
}

export interface IndexingPolicyIncludedPathsItem {
  /**
   * Path to include for indexing. Index paths start with the root (/) and typically end with the * wildcard operator. For example, /payload/* can be used to exclude everything under the payload property from indexing.
   */
  path?: string;
}

export interface IndexingPolicyExcludedPathsItem {
  /**
   * Path to exclude from indexing. Index paths start with the root (/) and typically end with the * wildcard operator. For example, /payload/* can be used to exclude everything under the payload property from indexing.
   */
  path?: string;
}

export interface IndexingPolicyCompositeIndexesItem {
  /**
   * Path to include as part of the composite index. Index paths start with the root (/) and typically end with the * wildcard operator. For example, /payload/* can be used to exclude everything under the payload property from indexing.
   */
  path?: string;
  /**
   * Sort order for the path.
   */
  order?: IndexingPolicyCompositeIndexesItemOrder;
}

export interface IndexingPolicySpatialIndexesItem {
  /**
   * Path to include for spatial indexing.
   */
  path?: string;
  /**
   * The spatial types to index.
   */
  types?: IndexingPolicySpatialIndexesPropertiesItemsItem[];
}

/**
 * This value is used to configure the partition key to be used for partitioning data into multiple partitions.
 */
export interface PartitionKey {
  paths: string[];
  /**
   * The algorithm used for partitioning. Only Hash is supported.
   */
  kind?: PartitionKeyKind;
  /**
   * To use the large partition key set the version to 2. To learn about large partition keys, see how to create containers with large partition key article.
   */
  version?: number;
}

export interface CollectionResponse {
  /**
   * The user generated unique name for the collection.
   */
  id?: string;
  /**
   * This value is used to configure indexing policy. By default, the indexing is automatic for all document paths within the collection.
   */
  indexingPolicy?: IndexingPolicy;
  /**
   * This value is used to configure the partition key to be used for partitioning data into multiple partitions.
   */
  partitionKey?: PartitionKey;
  /**
   * A system generated property. The resource ID (_rid) is a unique identifier that is also hierarchical per the resource stack on the resource model. It is used internally for placement of and navigation to the database resource.
   */
  rid?: Uint8Array;
  /**
   * A system generated property. It specifies the last updated timestamp of the resource. The value is a timestamp.
   */
  ts?: number;
  /**
   * A system generated property. It is the unique addressable URI for the resource.
   */
  self?: string;
  /**
   * A system generated property that specifies the resource etag required for optimistic concurrency control.
   */
  etag?: string;
  /**
   * A system generated property that specifies the addressable path of the documents resource.
   */
  doc?: any;
  /**
   * A system generated property that specifies the addressable path of the stored procedures (sprocs) resource.
   */
  sprocs?: any;
  /**
   * A system generated property that specifies the addressable path of the triggers resource.
   */
  triggers?: any;
  /**
   * A system generated property that specifies the addressable path of the user-defined functions (udfs) resource.
   */
  udfs?: any;
  /**
   * A system generated property that specifies the addressable path of the conflicts resource. During an operation on a resource within a collection, if a conflict occurs, users can inspect the conflicting resources by performing a GET on the conflicts URI path.
   */
  conflicts?: any;
}

export interface CollectionFeedResponse {
  /**
   * The _rid value is empty for this operation.
   */
  rid: string;
  /**
   * The collections returned as part of the list operation.
   */
  documentCollections?: CollectionResponse[];
  /**
   * This is the number of collections returned by the list operation.
   */
  count: number;
}

/**
 * Defines headers for MicrosoftAzureCosmosDBRestAPI_createDocument operation.
 */
export interface MicrosoftAzureCosmosDBRestAPICreateDocumentHeaders {
  xMsRequestCharge?: number;
}

/**
 * Defines headers for MicrosoftAzureCosmosDBRestAPI_readDocumentFeed operation.
 */
export interface MicrosoftAzureCosmosDBRestAPIReadDocumentFeedHeaders {
  xMsContinuation?: string;
  xMsRequestCharge?: number;
}

/**
 * Defines headers for MicrosoftAzureCosmosDBRestAPI_readDocument operation.
 */
export interface MicrosoftAzureCosmosDBRestAPIReadDocumentHeaders {
  xMsRequestCharge?: number;
}

/**
 * Defines headers for MicrosoftAzureCosmosDBRestAPI_replaceDocument operation.
 */
export interface MicrosoftAzureCosmosDBRestAPIReplaceDocumentHeaders {
  xMsRequestCharge?: number;
}

/**
 * Defines headers for MicrosoftAzureCosmosDBRestAPI_deleteDocument operation.
 */
export interface MicrosoftAzureCosmosDBRestAPIDeleteDocumentHeaders {
  xMsRequestCharge?: number;
}

/**
 * Defines headers for MicrosoftAzureCosmosDBRestAPI_readDatabaseFeed operation.
 */
export interface MicrosoftAzureCosmosDBRestAPIReadDatabaseFeedHeaders {
  xMsContinuation?: string;
  xMsRequestCharge?: number;
}

/**
 * Defines headers for MicrosoftAzureCosmosDBRestAPI_readCollectionFeed operation.
 */
export interface MicrosoftAzureCosmosDBRestAPIReadCollectionFeedHeaders {
  xMsContinuation?: string;
  xMsRequestCharge?: number;
}

/**
 * Defines values for HostOptions.
 */
export type HostOptions = "https://localhost:8081/" | "https://localhost:443/";
/**
 * Defines values for Enum1.
 */
export type Enum1 =
  | "2018-12-31"
  | "2018-09-17"
  | "2018-08-31"
  | "2018-06-18"
  | "2017-11-15"
  | "2017-05-03"
  | "2017-02-22"
  | "2017-01-19"
  | "2016-07-11"
  | "2015-12-16"
  | "2015-08-06"
  | "2015-06-03"
  | "2015-04-08"
  | "2014-08-21";
/**
 * Defines values for IndexingPolicyIndexingMode.
 */
export type IndexingPolicyIndexingMode = "Consistent" | "None";
/**
 * Defines values for IndexingPolicyCompositeIndexesItemOrder.
 */
export type IndexingPolicyCompositeIndexesItemOrder = "asc" | "desc";
/**
 * Defines values for IndexingPolicySpatialIndexesPropertiesItemsItem.
 */
export type IndexingPolicySpatialIndexesPropertiesItemsItem =
  | "Point"
  | "Polygon"
  | "LineString"
  | "MultiPolygon";
/**
 * Defines values for PartitionKeyKind.
 */
export type PartitionKeyKind = "Hash" | "Range";

/**
 * Contains response data for the createDocument operation.
 */
export type MicrosoftAzureCosmosDBRestAPICreateDocumentResponse = MicrosoftAzureCosmosDBRestAPICreateDocumentHeaders &
  DocumentResponse & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DocumentResponse;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: MicrosoftAzureCosmosDBRestAPICreateDocumentHeaders;
    };
  };

/**
 * Contains response data for the readDocumentFeed operation.
 */
export type MicrosoftAzureCosmosDBRestAPIReadDocumentFeedResponse = MicrosoftAzureCosmosDBRestAPIReadDocumentFeedHeaders &
  DocumentFeedResponse & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DocumentFeedResponse;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: MicrosoftAzureCosmosDBRestAPIReadDocumentFeedHeaders;
    };
  };

/**
 * Contains response data for the readDocument operation.
 */
export type MicrosoftAzureCosmosDBRestAPIReadDocumentResponse = MicrosoftAzureCosmosDBRestAPIReadDocumentHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: MicrosoftAzureCosmosDBRestAPIReadDocumentHeaders;
  };
};

/**
 * Contains response data for the replaceDocument operation.
 */
export type MicrosoftAzureCosmosDBRestAPIReplaceDocumentResponse = MicrosoftAzureCosmosDBRestAPIReplaceDocumentHeaders &
  DocumentResponse & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DocumentResponse;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: MicrosoftAzureCosmosDBRestAPIReplaceDocumentHeaders;
    };
  };

/**
 * Contains response data for the deleteDocument operation.
 */
export type MicrosoftAzureCosmosDBRestAPIDeleteDocumentResponse = MicrosoftAzureCosmosDBRestAPIDeleteDocumentHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: MicrosoftAzureCosmosDBRestAPIDeleteDocumentHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface MicrosoftAzureCosmosDBRestAPICreateDatabaseOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The JSON of the database that needs to be added to the database account.
   */
  body?: DatabaseRequest;
}

/**
 * Contains response data for the createDatabase operation.
 */
export type MicrosoftAzureCosmosDBRestAPICreateDatabaseResponse = DatabaseResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseResponse;
  };
};

/**
 * Contains response data for the readDatabaseFeed operation.
 */
export type MicrosoftAzureCosmosDBRestAPIReadDatabaseFeedResponse = MicrosoftAzureCosmosDBRestAPIReadDatabaseFeedHeaders &
  DatabaseFeedResponse & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseFeedResponse;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: MicrosoftAzureCosmosDBRestAPIReadDatabaseFeedHeaders;
    };
  };

/**
 * Contains response data for the readDatabase operation.
 */
export type MicrosoftAzureCosmosDBRestAPIReadDatabaseResponse = DatabaseResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DatabaseResponse;
  };
};

/**
 * Optional parameters.
 */
export interface MicrosoftAzureCosmosDBRestAPICreateCollectionOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The collection definition
   */
  body?: CollectionRequest;
}

/**
 * Contains response data for the createCollection operation.
 */
export type MicrosoftAzureCosmosDBRestAPICreateCollectionResponse = CollectionResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CollectionResponse;
  };
};

/**
 * Contains response data for the readCollectionFeed operation.
 */
export type MicrosoftAzureCosmosDBRestAPIReadCollectionFeedResponse = MicrosoftAzureCosmosDBRestAPIReadCollectionFeedHeaders &
  CollectionFeedResponse & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CollectionFeedResponse;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: MicrosoftAzureCosmosDBRestAPIReadCollectionFeedHeaders;
    };
  };

/**
 * Contains response data for the readCollection operation.
 */
export type MicrosoftAzureCosmosDBRestAPIReadCollectionResponse = CollectionResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CollectionResponse;
  };
};

/**
 * Optional parameters.
 */
export interface MicrosoftAzureCosmosDbRestApiOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: HostOptions;
  /**
   * An integer indicating the maximum number of items to be returned per page.
   */
  xMsMaxItemCount?: number;
  /**
   * A string token returned for queries and read-feed operations if there are more results to be read. Clients can retrieve the next page of results by resubmitting the request with the x-ms-continuation request header set to this value.
   */
  xMsContinuation?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
