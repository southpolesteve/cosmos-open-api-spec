/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const DocumentResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentResponse",
    modelProperties: {
      id: {
        constraints: {
          MaxLength: 255
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      rid: {
        serializedName: "_rid",
        required: true,
        type: {
          name: "ByteArray"
        }
      },
      ts: {
        serializedName: "_ts",
        required: true,
        type: {
          name: "Number"
        }
      },
      self: {
        serializedName: "_self",
        required: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "_etag",
        required: true,
        type: {
          name: "String"
        }
      },
      attachments: {
        serializedName: "_attachments",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PartitionKeyItemsItem: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PartitionKeyItemsItem"
  }
};

export const DocumentFeedResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentFeedResponse",
    modelProperties: {
      rid: {
        serializedName: "_rid",
        required: true,
        type: {
          name: "String"
        }
      },
      documents: {
        serializedName: "Documents",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DocumentResponse" }
          }
        }
      },
      count: {
        constraints: {},
        serializedName: "_count",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DocumentWithId: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentWithId",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseRequest",
    modelProperties: {
      id: {
        constraints: {
          MaxLength: 255
        },
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseResponse",
    modelProperties: {
      id: {
        constraints: {
          MaxLength: 255
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      rid: {
        serializedName: "_rid",
        required: true,
        type: {
          name: "ByteArray"
        }
      },
      ts: {
        serializedName: "_ts",
        required: true,
        type: {
          name: "Number"
        }
      },
      self: {
        serializedName: "_self",
        required: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "_etag",
        required: true,
        type: {
          name: "String"
        }
      },
      colls: {
        serializedName: "_colls",
        required: true,
        type: {
          name: "String"
        }
      },
      users: {
        serializedName: "_users",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseFeedResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseFeedResponse",
    modelProperties: {
      rid: {
        serializedName: "_rid",
        required: true,
        type: {
          name: "String"
        }
      },
      databases: {
        serializedName: "Databases",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DatabaseResponse" }
          }
        }
      },
      count: {
        constraints: {},
        serializedName: "_count",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CollectionRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CollectionRequest",
    modelProperties: {
      id: {
        constraints: {
          MaxLength: 255
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      indexingPolicy: {
        serializedName: "indexingPolicy",
        type: {
          name: "Composite",
          className: "IndexingPolicy"
        }
      },
      partitionKey: {
        serializedName: "partitionKey",
        type: {
          name: "Composite",
          className: "PartitionKey"
        }
      }
    }
  }
};

export const IndexingPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IndexingPolicy",
    modelProperties: {
      indexingMode: {
        defaultValue: "consistent",
        serializedName: "indexingMode",
        type: {
          name: "String"
        }
      },
      includedPaths: {
        serializedName: "includedPaths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IndexingPolicyIncludedPathsItem"
            }
          }
        }
      },
      excludedPaths: {
        serializedName: "excludedPaths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IndexingPolicyExcludedPathsItem"
            }
          }
        }
      },
      compositeIndexes: {
        serializedName: "compositeIndexes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IndexingPolicyCompositeIndexesItem"
            }
          }
        }
      },
      spatialIndexes: {
        serializedName: "spatialIndexes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IndexingPolicySpatialIndexesItem"
            }
          }
        }
      }
    }
  }
};

export const IndexingPolicyIncludedPathsItem: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IndexingPolicyIncludedPathsItem",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IndexingPolicyExcludedPathsItem: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IndexingPolicyExcludedPathsItem",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IndexingPolicyCompositeIndexesItem: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IndexingPolicyCompositeIndexesItem",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      order: {
        serializedName: "order",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IndexingPolicySpatialIndexesItem: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IndexingPolicySpatialIndexesItem",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      types: {
        serializedName: "types",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      }
    }
  }
};

export const PartitionKey: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PartitionKey",
    modelProperties: {
      paths: {
        serializedName: "paths",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      version: {
        defaultValue: 1,
        serializedName: "version",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CollectionResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CollectionResponse",
    modelProperties: {
      id: {
        constraints: {
          MaxLength: 255
        },
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      indexingPolicy: {
        serializedName: "indexingPolicy",
        type: {
          name: "Composite",
          className: "IndexingPolicy"
        }
      },
      partitionKey: {
        serializedName: "partitionKey",
        type: {
          name: "Composite",
          className: "PartitionKey"
        }
      },
      rid: {
        serializedName: "_rid",
        type: {
          name: "ByteArray"
        }
      },
      ts: {
        serializedName: "_ts",
        type: {
          name: "Number"
        }
      },
      self: {
        serializedName: "_self",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "_etag",
        type: {
          name: "String"
        }
      },
      doc: {
        serializedName: "_doc",
        type: {
          name: "any"
        }
      },
      sprocs: {
        serializedName: "_sprocs",
        type: {
          name: "any"
        }
      },
      triggers: {
        serializedName: "_triggers",
        type: {
          name: "any"
        }
      },
      udfs: {
        serializedName: "_udfs",
        type: {
          name: "any"
        }
      },
      conflicts: {
        serializedName: "_conflicts",
        type: {
          name: "any"
        }
      }
    }
  }
};

export const CollectionFeedResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CollectionFeedResponse",
    modelProperties: {
      rid: {
        serializedName: "_rid",
        required: true,
        type: {
          name: "String"
        }
      },
      documentCollections: {
        serializedName: "DocumentCollections",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "CollectionResponse" }
          }
        }
      },
      count: {
        constraints: {},
        serializedName: "_count",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MicrosoftAzureCosmosDBRestAPICreateDocumentHeaders: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MicrosoftAzureCosmosDBRestAPICreateDocumentHeaders",
    modelProperties: {
      xMsRequestCharge: {
        serializedName: "x-ms-request-charge",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MicrosoftAzureCosmosDBRestAPIReadDocumentFeedHeaders: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MicrosoftAzureCosmosDBRestAPIReadDocumentFeedHeaders",
    modelProperties: {
      xMsContinuation: {
        serializedName: "x-ms-continuation",
        type: {
          name: "String"
        }
      },
      xMsRequestCharge: {
        serializedName: "x-ms-request-charge",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MicrosoftAzureCosmosDBRestAPIReadDocumentHeaders: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MicrosoftAzureCosmosDBRestAPIReadDocumentHeaders",
    modelProperties: {
      xMsRequestCharge: {
        serializedName: "x-ms-request-charge",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MicrosoftAzureCosmosDBRestAPIReplaceDocumentHeaders: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MicrosoftAzureCosmosDBRestAPIReplaceDocumentHeaders",
    modelProperties: {
      xMsRequestCharge: {
        serializedName: "x-ms-request-charge",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MicrosoftAzureCosmosDBRestAPIDeleteDocumentHeaders: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MicrosoftAzureCosmosDBRestAPIDeleteDocumentHeaders",
    modelProperties: {
      xMsRequestCharge: {
        serializedName: "x-ms-request-charge",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MicrosoftAzureCosmosDBRestAPIReadDatabaseFeedHeaders: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MicrosoftAzureCosmosDBRestAPIReadDatabaseFeedHeaders",
    modelProperties: {
      xMsContinuation: {
        serializedName: "x-ms-continuation",
        type: {
          name: "String"
        }
      },
      xMsRequestCharge: {
        serializedName: "x-ms-request-charge",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MicrosoftAzureCosmosDBRestAPIReadCollectionFeedHeaders: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MicrosoftAzureCosmosDBRestAPIReadCollectionFeedHeaders",
    modelProperties: {
      xMsContinuation: {
        serializedName: "x-ms-continuation",
        type: {
          name: "String"
        }
      },
      xMsRequestCharge: {
        serializedName: "x-ms-request-charge",
        type: {
          name: "Number"
        }
      }
    }
  }
};
